{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "1499b4cf",
   "metadata": {},
   "source": [
    "## 1. Math background\n",
    "### 1.1 Exponential family distribution\n",
    "The general form of an exponential family distribution is:\n",
    "\n",
    "$$\n",
    "f(x, y) = h(y) \\exp\\left( \\eta^\\top T(x, y) - A(\\eta) \\right)\n",
    "$$\n",
    "\n",
    "In the context of generalized linear models (GLMs), the natural parameter $\\eta$ is linked to the predictors $\\mathbf{x}$ via:\n",
    "\n",
    "$$\n",
    "\\eta = \\mathbf{x}^\\top \\boldsymbol{\\beta}\n",
    "$$\n",
    "\n",
    "Thus, the conditional density of $y$ given $\\mathbf{x}$ becomes:\n",
    "\n",
    "$$\n",
    "f(y \\mid \\mathbf{x}) = h(y) \\exp\\left( y \\cdot \\mathbf{x}^\\top \\boldsymbol{\\beta} - A(\\mathbf{x}^\\top \\boldsymbol{\\beta}) \\right)\n",
    "$$\n",
    "\n",
    "The logistic regression\n",
    "Exponential family distribution for logistic regression:\n",
    "Now, we rewrite Bernoulli distribution in terms of exponential family distribution:\n",
    "$$\\begin{aligned}\n",
    "f(y_i|p) &= p^{y_i}(1-p)^{y_i} \\\\\n",
    " &= \n",
    " exp\\{log[p^{y_i}(1-p)^{y_i}] \\} \\\\\n",
    " &= \n",
    " exp\\{{y_i}log^p + {y_i}log^{(1-p)}\\} \\\\\n",
    " &= \n",
    " exp\\{{y_i}log^{\\frac{p}{1-p}} \\} \\\\\n",
    "\\end{aligned} \\tag{1}$$\n",
    "where, $$h(x) = 1\\tag{2}$$ \n",
    "$$T(x) = x\\tag{3}$$ \n",
    "$$\\eta = log^{\\frac{p}{1-p}}\\tag{4}$$ \n",
    "$$A(\\eta) = 1\\tag{5}$$\n",
    "In logistic regression, we assume $\\eta = \\boldsymbol{x}^T_i\\beta$, so \n",
    "$$p = Pr(y_i = 1|\\boldsymbol{x_i}) = \\frac{e^{\\eta}}{1+e^{\\eta}} = [1+e^{-\\eta}]^{-1} = [1+e^{-\\boldsymbol{x}_i\\boldsymbol{\\beta}}]^{-1}\\tag{6}$$\n",
    "\n",
    "\n",
    "### 1.2 Maximax likehood estimation\n",
    "$$\\begin{aligned}L(\\mathbf{y}|\\mathbf{X},\\boldsymbol{\\beta})=\\prod^n_{i = 1} p_i^{y_i}(1-p_i)^{1-y_i} \n",
    "\\end{aligned}$$\n",
    "where $y$ is the total number of success in $n$ trials.   \n",
    "The corresponding log-likelihood is \n",
    "$$\\begin{aligned}\\ell(\\mathbf{y}|\\mathbf{X},\\boldsymbol{\\beta}) \n",
    " &=log L(\\mathbf{y}|\\mathbf{X},\\boldsymbol{\\beta}) \\\\\n",
    " &=\\sum^n_{i=1}[ y_ilog^{p_i} + (1-y_i)log^{(1-p_i)}] \\\\\n",
    " &= \\sum^n_{i = 1} [y_ilog^{\\frac{p_i}{1-p_i}} + log^{(1-p_i)}] \\\\\n",
    " &= \\sum^n_{i = 1} [y_i \\boldsymbol{x}_i\\boldsymbol{\\beta} + log^{\\frac{1}{1+e^{\\boldsymbol{x}_i\\boldsymbol{\\beta}}}}] \\\\\n",
    " &= \\sum^n_{i = 1} [y_i \\boldsymbol{x}_i\\boldsymbol{\\beta} - log^{1+e^{\\boldsymbol{x}_i\\boldsymbol{\\beta}}}] \\\\\n",
    "&= \\sum^n_{i = 1} y_i \\boldsymbol{x}_i\\boldsymbol{\\beta} - \\sum^n_{i = 1} log^{1+e^{\\boldsymbol{x}_i\\boldsymbol{\\beta}}} \\\\\n",
    "\\end{aligned}$$\n",
    "#### 1.2.1. Gradient \n",
    "Take first-order derivative of $\\ell(\\mathbf{y}|\\mathbf{X},\\boldsymbol{\\beta})$ about $\\boldsymbol{\\beta}$, we have \n",
    "$$\\begin{aligned} \\nabla \\ell(\\boldsymbol{\\beta}) &= \\frac{\\partial \\ell(\\mathbf{y}|\\mathbf{X},\\boldsymbol{\\beta})}{\\partial \\boldsymbol{\\beta}} \\\\ &= \\sum^n_{i = 1} y_i \\boldsymbol{x}_i - \\sum^n_{i = 1} [\\frac{e^{\\boldsymbol{x}_i\\boldsymbol{\\beta}} }{1+ e^{\\boldsymbol{x}_i\\boldsymbol{\\beta}}}\\times \\boldsymbol{x}_i]  \\\\\n",
    "&= \\sum^n_{i=1}(y_i -p_i)\\boldsymbol{x}_i \\\\\n",
    "&= \\mathbf{X}^T(\\mathbf{y} - \\boldsymbol{\\mu}) \\\\\n",
    "\\end{aligned}$$\n",
    "where, $$\\boldsymbol{\\mu} =\\begin{bmatrix} p_1 \\\\ p_2 \\\\ \\vdots \\\\ p_n \\end{bmatrix} =\n",
    "\\begin{bmatrix}\n",
    "\\sigma(\\mathbf{x}_1^T \\boldsymbol{\\beta}) \\\\\n",
    "\\sigma(\\mathbf{x}_2^T \\boldsymbol{\\beta}) \\\\\n",
    "\\vdots \\\\\n",
    "\\sigma(\\mathbf{x}_n^T \\boldsymbol{\\beta})\n",
    "\\end{bmatrix}$$\n",
    "\n",
    "#### 1.2.2. Hessian (second derivative matrix)\n",
    "$$\\begin{aligned}\\mathbf{H} &= \\frac{\\partial^2 \\ell(\\boldsymbol{\\beta})}{\\partial \\boldsymbol{\\beta} \\, \\partial \\boldsymbol{\\beta}^T} \\\\\n",
    "&= \\frac{\\partial{[\\nabla \\ell(\\boldsymbol{\\beta})]}}{\\partial{\\boldsymbol{\\beta}}} \\\\ &= \\frac{\\partial{[- \\sum^n_{i = 1} [\\frac{e^{\\boldsymbol{x}_i\\boldsymbol{\\beta}} }{1+ e^{\\boldsymbol{x}_i\\boldsymbol{\\beta}}}\\times \\boldsymbol{x}_i]]}}{\\partial{\\boldsymbol{\\beta}}} \\\\\n",
    "&= \\frac{\\partial{[- \\sum^n_{i = 1} [{(1+ e^{-\\boldsymbol{x}_i\\boldsymbol{\\beta}})}^{-1}\\times \\boldsymbol{x}_i]]}}{\\partial{\\boldsymbol{\\beta}}} \\\\\n",
    "&= - \\sum^n_{i = 1} (-1) \\times [{(1+ e^{-\\boldsymbol{x}_i\\boldsymbol{\\beta}})}^{-2}\\times \\boldsymbol{x}_i] \\times e^{-\\boldsymbol{x}_i\\boldsymbol{\\beta}} \\times (-1) \\times \\boldsymbol{x}_i^T\n",
    "\\end{aligned}$$\n",
    "Given $p_i = {(1+ e^{-\\boldsymbol{x}_i\\boldsymbol{\\beta}})}^{-1}$ and $e^{\\boldsymbol{x}_i\\boldsymbol{\\beta}} = \\frac{p_i}{1-p_i}$, then\n",
    "$$\\begin{aligned}\\mathbf{H} &= - \\sum^n_{i = 1} (-1) \\times [{(1+ e^{-\\boldsymbol{x}_i\\boldsymbol{\\beta}})}^{-2}\\times \\boldsymbol{x}_i] \\times e^{-\\boldsymbol{x}_i\\boldsymbol{\\beta}} \\times (-1) \\times \\boldsymbol{x}_i^T \\\\\n",
    "&= - \\sum^n_{i = 1} [p_i^2\\times \\boldsymbol{x}_i] \\times \\frac{1-p_i}{p_i} \\times \\boldsymbol{x}_i^T \\\\\n",
    "&= - \\sum^n_{i = 1} (1-p_i)p_i \\times \\boldsymbol{x}_i \\times \\boldsymbol{x}_i^T \\\\\n",
    "&= -\\mathbf{X}^T\\mathbf{W}\\mathbf{X} \n",
    "\\end{aligned}$$\n",
    "Where, $\\mathbf{W} = diag[p_i(1-p_i)]$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2ee410a",
   "metadata": {},
   "source": [
    "### 1.3 Numerical Approximation\n",
    "#### 1.3.1 Gradient Ascent (on log-likelihood)\n",
    "\n",
    "We aim to maximize the log-likelihood:\n",
    "\n",
    "$$\n",
    "\\ell(\\boldsymbol{\\beta}) = \\mathbf{y}^T \\log(\\boldsymbol{\\mu}) + (\\mathbf{1} - \\mathbf{y})^T \\log(1 - \\boldsymbol{\\mu})\n",
    "$$\n",
    "\n",
    "Or simplified:\n",
    "\n",
    "$$\n",
    "\\ell(\\boldsymbol{\\beta}) = \\mathbf{y}^T \\mathbf{X} \\boldsymbol{\\beta} - \\mathbf{1}^T \\log(1 + e^{\\mathbf{X} \\boldsymbol{\\beta}})\n",
    "$$\n",
    "\n",
    "**Update rule:**\n",
    "\n",
    "$$\n",
    "\\boldsymbol{\\beta}^{(t+1)} = \\boldsymbol{\\beta}^{(t)} + \\alpha \\cdot \\mathbf{X}^T (\\mathbf{y} - \\boldsymbol{\\mu})\n",
    "$$\n",
    "\n",
    "Where:  \n",
    "- $\\alpha$: learning rate  \n",
    "- $\\boldsymbol{\\mu} = \\sigma(\\mathbf{X} \\boldsymbol{\\beta}^{(t)})$\n",
    "\n",
    "This is a *first-order* method.\n",
    "\n",
    "#### 1.3.2. Newton-Raphson (Second-order method)\n",
    "\n",
    "Use both the gradient and the Hessian to update $\\boldsymbol{\\beta}$:\n",
    "\n",
    "**Gradient:**\n",
    "\n",
    "$$\n",
    "\\nabla \\ell(\\boldsymbol{\\beta}) = \\mathbf{X}^T (\\mathbf{y} - \\boldsymbol{\\mu})\n",
    "$$\n",
    "\n",
    "**Hessian:**\n",
    "\n",
    "$$\n",
    "\\mathbf{H} = -\\mathbf{X}^T \\mathbf{W} \\mathbf{X}, \\quad \\text{where } \\mathbf{W} = \\operatorname{diag}(\\mu_i(1 - \\mu_i))\n",
    "$$\n",
    "\n",
    "**Update rule:**\n",
    "\n",
    "$$\n",
    "\\boldsymbol{\\beta}^{(t+1)} = \\boldsymbol{\\beta}^{(t)} - \\mathbf{H}^{-1} \\nabla \\ell(\\boldsymbol{\\beta}^{(t)})\n",
    "$$\n",
    "\n",
    "Or equivalently:\n",
    "\n",
    "$$\n",
    "\\boldsymbol{\\beta}^{(t+1)} = \\boldsymbol{\\beta}^{(t)} + (\\mathbf{X}^T \\mathbf{W} \\mathbf{X})^{-1} \\mathbf{X}^T (\\mathbf{y} - \\boldsymbol{\\mu})\n",
    "$$\n",
    "\n",
    "This method converges faster than gradient ascent but requires inverting a matrix, which can be expensive.\n",
    "\n",
    "#### 1.3.3. Iteratively Reweighted Least Squares (IRLS)\n",
    "\n",
    "IRLS is a special case of Newton-Raphson, reformulated as a weighted least squares:\n",
    "\n",
    "Define:  \n",
    "- Pseudo-response (working response):  \n",
    "  $$\n",
    "  \\mathbf{z} = \\boldsymbol{\\eta} + \\frac{\\mathbf{y} - \\boldsymbol{\\mu}}{\\mu_i (1 - \\mu_i)}\n",
    "  $$\n",
    "\n",
    "- Weight matrix:  \n",
    "  $$\n",
    "  \\mathbf{W} = \\operatorname{diag}(\\mu_i (1 - \\mu_i))\n",
    "  $$\n",
    "\n",
    "**Solve at each step:**\n",
    "\n",
    "$$\n",
    "\\boldsymbol{\\beta}^{(t+1)} = (\\mathbf{X}^T \\mathbf{W} \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{W} \\mathbf{z}\n",
    "$$\n",
    "\n",
    "This looks like a weighted linear regression, where weights and pseudo-response \\( \\mathbf{z} \\) are updated at each iteration.\n",
    "\n",
    "#### 1.3.4 Summary Comparison\n",
    "\n",
    "| Method           | Uses                | Update Formula                                                                 | Notes                                |\n",
    "|------------------|---------------------|--------------------------------------------------------------------------------|--------------------------------------|\n",
    "| **Gradient Ascent** | Gradient only       | $\\boldsymbol{\\beta}^{(t+1)} = \\boldsymbol{\\beta}^{(t)} + \\alpha \\mathbf{X}^T (\\mathbf{y} - \\boldsymbol{\\mu})$ | Simple, slow, needs tuning $\\alpha$ |\n",
    "| **Newton-Raphson** | Gradient + Hessian  | $\\boldsymbol{\\beta}^{(t+1)} = \\boldsymbol{\\beta}^{(t)} + (\\mathbf{X}^T \\mathbf{W} \\mathbf{X})^{-1} \\mathbf{X}^T (\\mathbf{y} - \\boldsymbol{\\mu})$ | Faster convergence, more computation |\n",
    "| **IRLS**            | Weighted Least Squares | $\\boldsymbol{\\beta}^{(t+1)} = (\\mathbf{X}^T \\mathbf{W} \\mathbf{X})^{-1} \\mathbf{X}^T \\mathbf{W} \\mathbf{z}$ | Very popular for GLMs                |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0661aba8",
   "metadata": {},
   "source": [
    "### 1.5 Implementation\n",
    "#### 1.5.1 Simulate dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6bf18463",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "from torch.nn.functional import sigmoid\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "import time\n",
    "\n",
    "# Setup\n",
    "device = torch.device(\"cpu\")\n",
    "np.random.seed(42)\n",
    "\n",
    "# Parameters\n",
    "n_samples = 500\n",
    "n_features = 10\n",
    "\n",
    "# Simulate features and labels\n",
    "X_np = np.random.randn(n_samples, n_features)\n",
    "true_beta = np.random.randn(n_features)\n",
    "logits = X_np @ true_beta\n",
    "probs = 1 / (1 + np.exp(-logits))\n",
    "y_np = np.random.binomial(1, probs)\n",
    "\n",
    "# Convert to PyTorch\n",
    "X = torch.tensor(X_np, dtype=torch.float32, device=device)\n",
    "y = torch.tensor(y_np, dtype=torch.float32, device=device).view(-1, 1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07cb3591",
   "metadata": {},
   "source": [
    "#### 1.5.2. Accuracy Helper Function (Code Cell)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "ebdbcb51",
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_accuracy(beta, X, y):\n",
    "    with torch.no_grad():\n",
    "        preds = (sigmoid(X @ beta) >= 0.5).float()\n",
    "        return (preds == y).float().mean().item()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1ca4562",
   "metadata": {},
   "source": [
    "#### 1.5.3. Gradient Ascent (Code Cell)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "85607972",
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradient_ascent(X, y, lr=0.1, max_iter=100):\n",
    "    # Initialize beta (weights) as a zero vector with shape (features, 1)\n",
    "    # requires_grad=True allows autograd to track operations on beta\n",
    "    beta = torch.zeros((X.shape[1], 1), requires_grad=True, device=device)\n",
    "\n",
    "    # Iterate for a fixed number of steps\n",
    "    for _ in range(max_iter):\n",
    "        # Compute the predicted probabilities using the sigmoid function\n",
    "        mu = sigmoid(X @ beta)\n",
    "\n",
    "        # Compute the negative log-likelihood loss\n",
    "        # Add small epsilon (1e-8) to avoid log(0) instability\n",
    "        loss = -torch.mean(y * torch.log(mu + 1e-8) + (1 - y) * torch.log(1 - mu + 1e-8))\n",
    "\n",
    "        # Compute gradients via backpropagation\n",
    "        loss.backward()\n",
    "\n",
    "        # Update beta using gradient ascent\n",
    "        with torch.no_grad():\n",
    "            # Gradient ascent step: move in the direction of the negative gradient\n",
    "            beta += lr * (-beta.grad)\n",
    "\n",
    "            # Reset gradients to zero for the next iteration\n",
    "            beta.grad.zero_()\n",
    "\n",
    "    # Detach the tensor from the computation graph and return it\n",
    "    return beta.detach()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c5519ba",
   "metadata": {},
   "source": [
    "#### 1.5.4. Newton-Raphson (Code Cell)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a1ef3661",
   "metadata": {},
   "outputs": [],
   "source": [
    "def newton_raphson(X, y, max_iter=10):\n",
    "    # Initialize beta (weights) as zeros; shape = (features, 1)\n",
    "    beta = torch.zeros((X.shape[1], 1), device=device)\n",
    "\n",
    "    # Loop for a fixed number of iterations\n",
    "    for _ in range(max_iter):\n",
    "        # Compute the predicted probabilities using the sigmoid function\n",
    "        mu = sigmoid(X @ beta)  # shape: (n_samples, 1)\n",
    "\n",
    "        # Compute the diagonal weight matrix W = diag(mu * (1 - mu))\n",
    "        W = torch.diag((mu * (1 - mu)).flatten())  # shape: (n_samples, n_samples)\n",
    "\n",
    "        # Compute the adjusted response z (working variable in IRLS/NR)\n",
    "        # z = η + (y - μ) / W = η + W⁻¹ (y - μ)\n",
    "        # η = X @ β\n",
    "        z = X @ beta + torch.inverse(W + 1e-4 * torch.eye(W.shape[0])) @ (y - mu)\n",
    "\n",
    "        # Update rule for Newton-Raphson:\n",
    "        # β = (Xᵀ W X)⁻¹ Xᵀ W z\n",
    "        # Add a small ridge term (1e-4 * I) for numerical stability\n",
    "        beta = torch.inverse(X.T @ W @ X + 1e-4 * torch.eye(X.shape[1])) @ X.T @ W @ z\n",
    "\n",
    "    # Return final estimate of beta\n",
    "    return beta\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cd01f2e",
   "metadata": {},
   "source": [
    "#### 1.5.5. IRLS (Code Cell)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e4ed962d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def irls(X, y, max_iter=10):\n",
    "    # Initialize beta (weights) as zeros; shape = (features, 1)\n",
    "    beta = torch.zeros((X.shape[1], 1), device=device)\n",
    "\n",
    "    # Iteratively update beta using weighted least squares\n",
    "    for _ in range(max_iter):\n",
    "        # Compute the linear predictor η = X @ beta\n",
    "        eta = X @ beta\n",
    "\n",
    "        # Compute predicted probabilities using sigmoid(η)\n",
    "        mu = sigmoid(eta)  # shape: (n_samples, 1)\n",
    "\n",
    "        # Compute weights: W_diag = μ(1 - μ) (flattened for diag)\n",
    "        W_diag = (mu * (1 - mu)).flatten()  # shape: (n_samples,)\n",
    "\n",
    "        # Construct the diagonal weight matrix W\n",
    "        W = torch.diag(W_diag)  # shape: (n_samples, n_samples)\n",
    "\n",
    "        # Compute the working response z:\n",
    "        # z = η + (y - μ) / [μ(1 - μ)]\n",
    "        z = eta + (y - mu) / (W_diag.view(-1, 1) + 1e-8)  # add epsilon for numerical stability\n",
    "\n",
    "        # Weighted least squares update:\n",
    "        # β = (Xᵀ W X)⁻¹ Xᵀ W z\n",
    "        beta = torch.inverse(X.T @ W @ X + 1e-4 * torch.eye(X.shape[1])) @ X.T @ W @ z\n",
    "\n",
    "    # Return the final estimate of beta\n",
    "    return beta\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68b77603",
   "metadata": {},
   "source": [
    "#### 1.5.6. Compare All Methods (Code Cell)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a3d63643",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Time (s)</th>\n",
       "      <th>Accuracy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Gradient Ascent</th>\n",
       "      <td>0.012920</td>\n",
       "      <td>0.834</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Newton-Raphson</th>\n",
       "      <td>0.016865</td>\n",
       "      <td>0.836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>IRLS</th>\n",
       "      <td>0.001456</td>\n",
       "      <td>0.836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>scikit-learn</th>\n",
       "      <td>0.001023</td>\n",
       "      <td>0.836</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Time (s)  Accuracy\n",
       "Gradient Ascent  0.012920     0.834\n",
       "Newton-Raphson   0.016865     0.836\n",
       "IRLS             0.001456     0.836\n",
       "scikit-learn     0.001023     0.836"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results = {}\n",
    "\n",
    "start = time.time()\n",
    "beta_gd = gradient_ascent(X, y)\n",
    "results['Gradient Ascent'] = (time.time() - start, compute_accuracy(beta_gd, X, y))\n",
    "\n",
    "start = time.time()\n",
    "beta_nr = newton_raphson(X, y)\n",
    "results['Newton-Raphson'] = (time.time() - start, compute_accuracy(beta_nr, X, y))\n",
    "\n",
    "start = time.time()\n",
    "beta_irls = irls(X, y)\n",
    "results['IRLS'] = (time.time() - start, compute_accuracy(beta_irls, X, y))\n",
    "\n",
    "# Scikit-learn\n",
    "sk_model = LogisticRegression(fit_intercept=False, max_iter=1000)\n",
    "start = time.time()\n",
    "sk_model.fit(X_np, y_np)\n",
    "sk_time = time.time() - start\n",
    "sk_acc = accuracy_score(y_np, sk_model.predict(X_np))\n",
    "results['scikit-learn'] = (sk_time, sk_acc)\n",
    "\n",
    "# Print comparison\n",
    "import pandas as pd\n",
    "pd.DataFrame(results, index=['Time (s)', 'Accuracy']).T\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "378e50aa",
   "metadata": {},
   "source": [
    "####  1.5.7. Plot Gradient Ascent Convergence (Optional Code Cell)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "91c0dbdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import torch\n",
    "from torch.nn.functional import sigmoid\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "# --------- Gradient Ascent with loss tracking ---------\n",
    "def gradient_ascent_trace(X, y, lr=0.1, max_iter=100):\n",
    "    # Initialize beta with zeros and enable gradient tracking\n",
    "    beta = torch.zeros((X.shape[1], 1), requires_grad=True, device=device)\n",
    "    loss_trace = []  # Store loss values for plotting\n",
    "\n",
    "    for _ in range(max_iter):\n",
    "        # Predicted probabilities using sigmoid function\n",
    "        mu = sigmoid(X @ beta)\n",
    "\n",
    "        # Compute negative log-likelihood (add small epsilon for numerical stability)\n",
    "        loss = -torch.mean(y * torch.log(mu + 1e-8) + (1 - y) * torch.log(1 - mu + 1e-8))\n",
    "        loss_trace.append(loss.item())  # Store current loss\n",
    "\n",
    "        # Compute gradient\n",
    "        loss.backward()\n",
    "\n",
    "        # Gradient ascent step\n",
    "        with torch.no_grad():\n",
    "            beta += lr * (-beta.grad)  # Ascend the negative gradient\n",
    "            beta.grad.zero_()          # Reset gradients for next iteration\n",
    "\n",
    "    return beta.detach(), loss_trace  # Return final beta and loss history\n",
    "\n",
    "# --------- Newton-Raphson with loss tracking ---------\n",
    "def newton_raphson_trace(X, y, max_iter=10):\n",
    "    beta = torch.zeros((X.shape[1], 1), device=device)\n",
    "    loss_trace = []\n",
    "\n",
    "    for _ in range(max_iter):\n",
    "        mu = sigmoid(X @ beta)  # Predicted probabilities\n",
    "        loss = -torch.mean(y * torch.log(mu + 1e-8) + (1 - y) * torch.log(1 - mu + 1e-8))\n",
    "        loss_trace.append(loss.item())\n",
    "\n",
    "        # Construct weight matrix W = diag(mu * (1 - mu))\n",
    "        W = torch.diag((mu * (1 - mu)).flatten())\n",
    "\n",
    "        # Compute pseudo-response z\n",
    "        z = X @ beta + torch.inverse(W + 1e-4 * torch.eye(W.shape[0])) @ (y - mu)\n",
    "\n",
    "        # Newton-Raphson update: beta = (Xᵀ W X)⁻¹ Xᵀ W z\n",
    "        beta = torch.inverse(X.T @ W @ X + 1e-4 * torch.eye(X.shape[1])) @ X.T @ W @ z\n",
    "\n",
    "    return beta, loss_trace\n",
    "\n",
    "# --------- IRLS with loss tracking ---------\n",
    "def irls_trace(X, y, max_iter=10):\n",
    "    beta = torch.zeros((X.shape[1], 1), device=device)\n",
    "    loss_trace = []\n",
    "\n",
    "    for _ in range(max_iter):\n",
    "        eta = X @ beta          # Linear predictor\n",
    "        mu = sigmoid(eta)       # Predicted probabilities\n",
    "        loss = -torch.mean(y * torch.log(mu + 1e-8) + (1 - y) * torch.log(1 - mu + 1e-8))\n",
    "        loss_trace.append(loss.item())\n",
    "\n",
    "        W_diag = (mu * (1 - mu)).flatten()  # Diagonal of weight matrix\n",
    "        W = torch.diag(W_diag)              # Weight matrix W\n",
    "\n",
    "        # Compute pseudo-response z\n",
    "        z = eta + (y - mu) / (W_diag.view(-1, 1) + 1e-8)  # Add epsilon to prevent div-by-zero\n",
    "\n",
    "        # IRLS update: beta = (Xᵀ W X)⁻¹ Xᵀ W z\n",
    "        beta = torch.inverse(X.T @ W @ X + 1e-4 * torch.eye(X.shape[1])) @ X.T @ W @ z\n",
    "\n",
    "    return beta, loss_trace\n",
    "\n",
    "# --------- scikit-learn model as benchmark ---------\n",
    "# Fit logistic regression using sklearn for reference\n",
    "sk_model = LogisticRegression(fit_intercept=False, max_iter=1000)\n",
    "sk_model.fit(X_np, y_np)\n",
    "\n",
    "# Compute loss using sklearn's fitted coefficients\n",
    "logits_sk = X_np @ sk_model.coef_.flatten()\n",
    "mu_sk = 1 / (1 + np.exp(-logits_sk))\n",
    "loss_sklearn = -np.mean(y_np * np.log(mu_sk + 1e-8) + (1 - y_np) * np.log(1 - mu_sk + 1e-8))\n",
    "\n",
    "# --------- Run all methods and collect loss traces ---------\n",
    "_, loss_gd = gradient_ascent_trace(X, y, lr=0.1, max_iter=100)\n",
    "_, loss_nr = newton_raphson_trace(X, y, max_iter=10)\n",
    "_, loss_irls = irls_trace(X, y, max_iter=10)\n",
    "\n",
    "# For sklearn, use a flat horizontal line for loss comparison\n",
    "loss_sklearn_line = [loss_sklearn] * max(len(loss_gd), len(loss_nr), len(loss_irls))\n",
    "\n",
    "# --------- Plot convergence of all methods ---------\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Gradient Ascent: smooth line\n",
    "plt.plot(loss_gd, label=\"Gradient Ascent\", color=\"blue\", linewidth=2)\n",
    "\n",
    "# Newton-Raphson: dots with orange line\n",
    "plt.plot(np.arange(len(loss_nr)), loss_nr, 'o-', label=\"Newton-Raphson\", color=\"orange\", markersize=6)\n",
    "\n",
    "# IRLS: green dashed line with squares\n",
    "plt.plot(np.arange(len(loss_irls)), loss_irls, 's--', label=\"IRLS\", color=\"green\", markersize=6)\n",
    "\n",
    "# scikit-learn: black dashed horizontal line\n",
    "plt.axhline(loss_sklearn, color=\"black\", linestyle=\"--\", linewidth=2, label=\"scikit-learn\")\n",
    "\n",
    "# Decorate the plot\n",
    "plt.xlabel(\"Iteration\")\n",
    "plt.ylabel(\"Negative Log-Likelihood\")\n",
    "plt.title(\"Convergence of Logistic Regression Methods\")\n",
    "plt.legend()\n",
    "plt.grid(True)\n",
    "plt.tight_layout()\n",
    "plt.show()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
